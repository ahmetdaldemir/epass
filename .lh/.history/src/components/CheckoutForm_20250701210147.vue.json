{
    "sourceFile": ".history/src/components/CheckoutForm_20250701210147.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1751445855874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1751445855874,
            "name": "Commit-0",
            "content": "<template>\r\n  <div class=\"checkout-container\">\r\n    <h2>Payment</h2>\r\n    <form @submit.prevent=\"handleSubmit\" class=\"checkout-form\">\r\n      <div class=\"form-group\">\r\n        <label>Name on Card</label>\r\n        <input v-model=\"name\" type=\"text\" required placeholder=\"Full Name\" />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Email Address</label>\r\n        <input v-model=\"email\" type=\"email\" required placeholder=\"you@email.com\" />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Card Details</label>\r\n        <div id=\"card-element\" class=\"stripe-card-element\"></div>\r\n      </div>\r\n      <div class=\"order-summary\">\r\n        <div class=\"summary-row\">\r\n          <span>Order Total</span>\r\n          <span class=\"total-amount\">{{ orderTotal }}</span>\r\n        </div>\r\n      </div>\r\n      <button class=\"pay-btn\" :disabled=\"loading\">\r\n        <span v-if=\"loading\">Processing...</span>\r\n        <span v-else>Pay Now</span>\r\n      </button>\r\n      <div v-if=\"success\" class=\"success-message\">\r\n        <i class=\"fas fa-check-circle\"></i> Payment Successful! Thank you.\r\n      </div>\r\n      <div v-if=\"errorMsg\" class=\"error-message\">\r\n        <i class=\"fas fa-exclamation-circle\"></i> {{ errorMsg }}\r\n      </div>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue'\r\nlet stripe, elements, card\r\n\r\nconst props = defineProps({\r\n  orderTotal: { type: String, default: '€149.00' }\r\n})\r\n\r\nconst name = ref('')\r\nconst email = ref('')\r\nconst loading = ref(false)\r\nconst success = ref(false)\r\nconst errorMsg = ref('')\r\n\r\nonMounted(() => {\r\n  if (!window.Stripe) {\r\n    const script = document.createElement('script')\r\n    script.src = 'https://js.stripe.com/v3/'\r\n    script.onload = setupStripe\r\n    document.head.appendChild(script)\r\n  } else {\r\n    setupStripe()\r\n  }\r\n})\r\n\r\nfunction setupStripe() {\r\n  stripe = window.Stripe('pk_test_51N9...YOUR_PUBLIC_KEY...') // TODO: Replace with your real public key\r\n  elements = stripe.elements()\r\n  card = elements.create('card')\r\n  card.mount('#card-element')\r\n}\r\n\r\nconst handleSubmit = async () => {\r\n  loading.value = true\r\n  errorMsg.value = ''\r\n  success.value = false\r\n  try {\r\n    // 1. Create payment intent on your backend (API call required)\r\n    // 2. Confirm card payment with Stripe.js\r\n    // ---\r\n    // Demo: Sadece frontend gösterimi, gerçek ödeme için backend gereklidir.\r\n    // Aşağıdaki kodu backend entegrasyonu ile değiştirin.\r\n    const { paymentMethod, error } = await stripe.createPaymentMethod({\r\n      type: 'card',\r\n      card: card,\r\n      billing_details: {\r\n        name: name.value,\r\n        email: email.value\r\n      }\r\n    })\r\n    if (error) {\r\n      errorMsg.value = error.message\r\n      loading.value = false\r\n      return\r\n    }\r\n    // Gerçek uygulamada burada backend'e paymentMethod.id gönderip paymentIntent oluşturmalısınız.\r\n    // Başarılı demo için:\r\n    setTimeout(() => {\r\n      loading.value = false\r\n      success.value = true\r\n    }, 1200)\r\n  } catch (err) {\r\n    errorMsg.value = err.message || 'Payment failed.'\r\n    loading.value = false\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.checkout-container {\r\n  width: 600px;\r\n  background: #fff;\r\n  border-radius: 18px;\r\n  box-shadow: 0 2px 16px rgba(0,0,0,0.07);\r\n  padding: 32px 24px;\r\n  font-family: 'Inter', sans-serif;\r\n}\r\n.checkout-container h2 {\r\n  color: #FC6421;\r\n  font-size: 2rem;\r\n  margin-bottom: 18px;\r\n  font-weight: 700;\r\n  text-align: center;\r\n}\r\n.checkout-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n}\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n}\r\ninput {\r\n  padding: 10px 12px;\r\n  border-radius: 8px;\r\n  border: 1px solid #eee;\r\n  font-size: 1rem;\r\n}\r\n.stripe-card-element {\r\n  padding: 10px 12px;\r\n  border-radius: 8px;\r\n  border: 1px solid #eee;\r\n  background: #fafafa;\r\n  margin-top: 4px;\r\n}\r\n.order-summary {\r\n  margin: 16px 0 8px 0;\r\n  padding: 12px;\r\n  background: #f7f7f7;\r\n  border-radius: 8px;\r\n}\r\n.summary-row {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  font-size: 1.1rem;\r\n  font-weight: 600;\r\n}\r\n.total-amount {\r\n  color: #FC6421;\r\n}\r\n.pay-btn {\r\n  width: 100%;\r\n  background: #FC6421;\r\n  color: #fff;\r\n  font-size: 1.1rem;\r\n  font-weight: 700;\r\n  border: none;\r\n  border-radius: 10px;\r\n  padding: 14px 0;\r\n  margin: 12px 0 0 0;\r\n  cursor: pointer;\r\n  transition: background 0.2s;\r\n  box-shadow: 0 2px 8px rgba(230,0,76,0.08);\r\n}\r\n.pay-btn:disabled {\r\n  background: #aaa;\r\n  cursor: not-allowed;\r\n}\r\n.success-message {\r\n  color: #27ae60;\r\n  text-align: center;\r\n  margin-top: 16px;\r\n  font-size: 1.1rem;\r\n}\r\n.error-message {\r\n  color: #fc6421;\r\n  text-align: center;\r\n  margin-top: 12px;\r\n  font-size: 1rem;\r\n}\r\n</style> "
        }
    ]
}