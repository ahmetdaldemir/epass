{
    "sourceFile": "src/stores/currency.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 41,
            "patches": [
                {
                    "date": 1752748923169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752749925365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,17 +40,20 @@\n   const getCurrencyById = (id) => {\r\n     return currencies.value.find(c => c.id === id)\r\n   }\r\n \r\n-  // Convert price from TRY to target currency\r\n-  const convertPrice = (priceInTRY, targetCurrencyCode) => {\r\n-    if (!priceInTRY || !targetCurrencyCode) return priceInTRY\r\n+  // Convert price from EUR to target currency\r\n+  const convertPrice = (priceInEUR, targetCurrencyCode) => {\r\n+    if (!priceInEUR || !targetCurrencyCode) return priceInEUR\r\n     \r\n     const targetCurrency = getCurrencyByCode(targetCurrencyCode)\r\n-    if (!targetCurrency) return priceInTRY\r\n+    if (!targetCurrency) return priceInEUR\r\n     \r\n-    // TRY is base currency (price = 1), so we divide by target currency price\r\n-    const convertedPrice = parseFloat(priceInTRY) / parseFloat(targetCurrency.price)\r\n+    // EUR is base currency (price = 37.4671), so we multiply by target currency price and divide by EUR price\r\n+    const eurCurrency = getCurrencyByCode('EUR')\r\n+    if (!eurCurrency) return priceInEUR\r\n+    \r\n+    const convertedPrice = (parseFloat(priceInEUR) * parseFloat(targetCurrency.price)) / parseFloat(eurCurrency.price)\r\n     return convertedPrice.toFixed(2)\r\n   }\r\n \r\n   // Convert price from any currency to TRY\r\n"
                },
                {
                    "date": 1752749933315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,17 +55,21 @@\n     const convertedPrice = (parseFloat(priceInEUR) * parseFloat(targetCurrency.price)) / parseFloat(eurCurrency.price)\r\n     return convertedPrice.toFixed(2)\r\n   }\r\n \r\n-  // Convert price from any currency to TRY\r\n-  const convertToTRY = (price, fromCurrencyCode) => {\r\n+  // Convert price from any currency to EUR\r\n+  const convertToEUR = (price, fromCurrencyCode) => {\r\n     if (!price || !fromCurrencyCode) return price\r\n     \r\n     const fromCurrency = getCurrencyByCode(fromCurrencyCode)\r\n     if (!fromCurrency) return price\r\n     \r\n-    // Multiply by the currency price to get TRY value\r\n-    return (parseFloat(price) * parseFloat(fromCurrency.price)).toFixed(2)\r\n+    // Convert to EUR using currency rates\r\n+    const eurCurrency = getCurrencyByCode('EUR')\r\n+    if (!eurCurrency) return price\r\n+    \r\n+    const convertedPrice = (parseFloat(price) * parseFloat(fromCurrency.price)) / parseFloat(eurCurrency.price)\r\n+    return convertedPrice.toFixed(2)\r\n   }\r\n \r\n   // Format price with currency symbol\r\n   const formatPrice = (price, currencyCode) => {\r\n"
                },
                {
                    "date": 1752750218042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,13 +47,17 @@\n     \r\n     const targetCurrency = getCurrencyByCode(targetCurrencyCode)\r\n     if (!targetCurrency) return priceInEUR\r\n     \r\n-    // EUR is base currency (price = 37.4671), so we multiply by target currency price and divide by EUR price\r\n+    // Database'deki değerler TRY bazında: EUR=37.4671, USD=35.125, GBP=41.135, TRY=1\r\n+    // 10 EUR = 10 × 37.4671 = 374.671 TRY\r\n+    // 374.671 TRY = 374.671 ÷ 35.125 = 10.67 USD\r\n     const eurCurrency = getCurrencyByCode('EUR')\r\n     if (!eurCurrency) return priceInEUR\r\n     \r\n-    const convertedPrice = (parseFloat(priceInEUR) * parseFloat(targetCurrency.price)) / parseFloat(eurCurrency.price)\r\n+    // Önce EUR'yu TRY'ye çevir, sonra hedef currency'ye çevir\r\n+    const priceInTRY = parseFloat(priceInEUR) * parseFloat(eurCurrency.price)\r\n+    const convertedPrice = priceInTRY / parseFloat(targetCurrency.price)\r\n     return convertedPrice.toFixed(2)\r\n   }\r\n \r\n   // Convert price from any currency to EUR\r\n@@ -95,9 +99,9 @@\n     getCurrentCurrency,\r\n     getCurrencyByCode,\r\n     getCurrencyById,\r\n     convertPrice,\r\n-    convertToTRY,\r\n+    convertToEUR,\r\n     formatPrice,\r\n     currentCurrency\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752750232999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,11 @@\n     // Convert to EUR using currency rates\r\n     const eurCurrency = getCurrencyByCode('EUR')\r\n     if (!eurCurrency) return price\r\n     \r\n-    const convertedPrice = (parseFloat(price) * parseFloat(fromCurrency.price)) / parseFloat(eurCurrency.price)\r\n+    // Önce TRY'ye çevir, sonra EUR'ya çevir\r\n+    const priceInTRY = parseFloat(price) * parseFloat(fromCurrency.price)\r\n+    const convertedPrice = priceInTRY / parseFloat(eurCurrency.price)\r\n     return convertedPrice.toFixed(2)\r\n   }\r\n \r\n   // Format price with currency symbol\r\n"
                },
                {
                    "date": 1752750395896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,15 +76,28 @@\n     const convertedPrice = priceInTRY / parseFloat(eurCurrency.price)\r\n     return convertedPrice.toFixed(2)\r\n   }\r\n \r\n-  // Format price with currency symbol\r\n+  // Format price with currency symbol for display (2 decimal places)\r\n   const formatPrice = (price, currencyCode) => {\r\n     if (!price) return ''\r\n     \r\n     const currency = getCurrencyByCode(currencyCode)\r\n     if (!currency) return `${price}`\r\n     \r\n+    // Önyüzde gösterim için 2 basamak\r\n+    const displayPrice = parseFloat(price).toFixed(2)\r\n+    return `${currency.icon}${displayPrice}`\r\n+  }\r\n+\r\n+  // Format price with full precision for payment processing\r\n+  const formatPriceForPayment = (price, currencyCode) => {\r\n+    if (!price) return ''\r\n+    \r\n+    const currency = getCurrencyByCode(currencyCode)\r\n+    if (!currency) return `${price}`\r\n+    \r\n+    // Ödeme için tam hassasiyet\r\n     return `${currency.icon}${price}`\r\n   }\r\n \r\n   // Get current currency info\r\n"
                },
                {
                    "date": 1752750402638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,7 +116,8 @@\n     getCurrencyById,\r\n     convertPrice,\r\n     convertToEUR,\r\n     formatPrice,\r\n+    formatPriceForPayment,\r\n     currentCurrency\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752750429223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,10 @@\n     \r\n     // Önce EUR'yu TRY'ye çevir, sonra hedef currency'ye çevir\r\n     const priceInTRY = parseFloat(priceInEUR) * parseFloat(eurCurrency.price)\r\n     const convertedPrice = priceInTRY / parseFloat(targetCurrency.price)\r\n-    return convertedPrice.toFixed(2)\r\n+    // Tam hassasiyet döndür, formatPrice fonksiyonu 2 basamak yapacak\r\n+    return convertedPrice.toString()\r\n   }\r\n \r\n   // Convert price from any currency to EUR\r\n   const convertToEUR = (price, fromCurrencyCode) => {\r\n"
                },
                {
                    "date": 1752750436443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,10 @@\n     \r\n     // Önce TRY'ye çevir, sonra EUR'ya çevir\r\n     const priceInTRY = parseFloat(price) * parseFloat(fromCurrency.price)\r\n     const convertedPrice = priceInTRY / parseFloat(eurCurrency.price)\r\n-    return convertedPrice.toFixed(2)\r\n+    // Tam hassasiyet döndür\r\n+    return convertedPrice.toString()\r\n   }\r\n \r\n   // Format price with currency symbol for display (2 decimal places)\r\n   const formatPrice = (price, currencyCode) => {\r\n"
                },
                {
                    "date": 1752842057521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,13 @@\n   const getCurrentCurrency = () => {\r\n     return localStorage.getItem('selectedCurrency') || 'EUR'\r\n   }\r\n \r\n+  // Set current currency in localStorage\r\n+  const setCurrentCurrency = (currencyCode) => {\r\n+    localStorage.setItem('selectedCurrency', currencyCode)\r\n+  }\r\n+\r\n   // Get currency by code\r\n   const getCurrencyByCode = (code) => {\r\n     return currencies.value.find(c => c.currency === code)\r\n   }\r\n"
                },
                {
                    "date": 1752842063356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,8 +118,9 @@\n     loading,\r\n     error,\r\n     fetchCurrencies,\r\n     getCurrentCurrency,\r\n+    setCurrentCurrency,\r\n     getCurrencyByCode,\r\n     getCurrencyById,\r\n     convertPrice,\r\n     convertToEUR,\r\n"
                },
                {
                    "date": 1752842184771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,10 @@\n export const useCurrencyStore = () => {\r\n   const currencies = ref([])\r\n   const loading = ref(false)\r\n   const error = ref(null)\r\n+  // Reaktif current currency\r\n+  const currentCurrencyCode = ref(localStorage.getItem('selectedCurrency') || 'EUR')\r\n \r\n   // Fetch currencies from API\r\n   const fetchCurrencies = async () => {\r\n     loading.value = true\r\n"
                },
                {
                    "date": 1752842192324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,16 +27,17 @@\n       loading.value = false\r\n     }\r\n   }\r\n \r\n-  // Get current currency from localStorage\r\n+  // Get current currency from reactive ref\r\n   const getCurrentCurrency = () => {\r\n-    return localStorage.getItem('selectedCurrency') || 'EUR'\r\n+    return currentCurrencyCode.value\r\n   }\r\n \r\n-  // Set current currency in localStorage\r\n+  // Set current currency in localStorage and reactive ref\r\n   const setCurrentCurrency = (currencyCode) => {\r\n     localStorage.setItem('selectedCurrency', currencyCode)\r\n+    currentCurrencyCode.value = currencyCode\r\n   }\r\n \r\n   // Get currency by code\r\n   const getCurrencyByCode = (code) => {\r\n"
                },
                {
                    "date": 1752842201341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,10 +111,9 @@\n   }\r\n \r\n   // Get current currency info\r\n   const currentCurrency = computed(() => {\r\n-    const code = getCurrentCurrency()\r\n-    return getCurrencyByCode(code)\r\n+    return getCurrencyByCode(currentCurrencyCode.value)\r\n   })\r\n \r\n   return {\r\n     currencies,\r\n"
                },
                {
                    "date": 1752928322698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,18 +55,29 @@\n     \r\n     const targetCurrency = getCurrencyByCode(targetCurrencyCode)\r\n     if (!targetCurrency) return priceInEUR\r\n     \r\n-    // Database'deki değerler TRY bazında: EUR=37.4671, USD=35.125, GBP=41.135, TRY=1\r\n-    // 10 EUR = 10 × 37.4671 = 374.671 TRY\r\n-    // 374.671 TRY = 374.671 ÷ 35.125 = 10.67 USD\r\n+    // Eğer hedef para birimi EUR ise, direkt döndür\r\n+    if (targetCurrencyCode === 'EUR') {\r\n+      return parseFloat(priceInEUR).toString()\r\n+    }\r\n+    \r\n+    // API'den gelen currency oranları TRY bazında\r\n+    // EUR=37.4671, USD=35.125, GBP=41.135, TRY=1\r\n+    // Bu oranlar 1 TRY = X USD/EUR/GBP şeklinde\r\n+    // Yani 1 EUR = 37.4671 TRY, 1 USD = 35.125 TRY\r\n+    \r\n     const eurCurrency = getCurrencyByCode('EUR')\r\n     if (!eurCurrency) return priceInEUR\r\n     \r\n-    // Önce EUR'yu TRY'ye çevir, sonra hedef currency'ye çevir\r\n+    // EUR'dan TRY'ye çevir: 1 EUR = 37.4671 TRY\r\n     const priceInTRY = parseFloat(priceInEUR) * parseFloat(eurCurrency.price)\r\n+    \r\n+    // TRY'den hedef para birimine çevir\r\n     const convertedPrice = priceInTRY / parseFloat(targetCurrency.price)\r\n-    // Tam hassasiyet döndür, formatPrice fonksiyonu 2 basamak yapacak\r\n+    \r\n+    console.log(`Currency conversion: ${priceInEUR} EUR = ${priceInTRY} TRY = ${convertedPrice} ${targetCurrencyCode}`)\r\n+    \r\n     return convertedPrice.toString()\r\n   }\r\n \r\n   // Convert price from any currency to EUR\r\n"
                },
                {
                    "date": 1752928555263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,29 +55,18 @@\n     \r\n     const targetCurrency = getCurrencyByCode(targetCurrencyCode)\r\n     if (!targetCurrency) return priceInEUR\r\n     \r\n-    // Eğer hedef para birimi EUR ise, direkt döndür\r\n-    if (targetCurrencyCode === 'EUR') {\r\n-      return parseFloat(priceInEUR).toString()\r\n-    }\r\n-    \r\n-    // API'den gelen currency oranları TRY bazında\r\n-    // EUR=37.4671, USD=35.125, GBP=41.135, TRY=1\r\n-    // Bu oranlar 1 TRY = X USD/EUR/GBP şeklinde\r\n-    // Yani 1 EUR = 37.4671 TRY, 1 USD = 35.125 TRY\r\n-    \r\n+    // Database'deki değerler TRY bazında: EUR=37.4671, USD=35.125, GBP=41.135, TRY=1\r\n+    // 10 EUR = 10 × 37.4671 = 374.671 TRY\r\n+    // 374.671 TRY = 374.671 ÷ 35.125 = 10.67 USD\r\n     const eurCurrency = getCurrencyByCode('EUR')\r\n     if (!eurCurrency) return priceInEUR\r\n     \r\n-    // EUR'dan TRY'ye çevir: 1 EUR = 37.4671 TRY\r\n+    // Önce EUR'yu TRY'ye çevir, sonra hedef currency'ye çevir\r\n     const priceInTRY = parseFloat(priceInEUR) * parseFloat(eurCurrency.price)\r\n-    \r\n-    // TRY'den hedef para birimine çevir\r\n     const convertedPrice = priceInTRY / parseFloat(targetCurrency.price)\r\n-    \r\n-    console.log(`Currency conversion: ${priceInEUR} EUR = ${priceInTRY} TRY = ${convertedPrice} ${targetCurrencyCode}`)\r\n-    \r\n+    // Tam hassasiyet döndür, formatPrice fonksiyonu 2 basamak yapacak\r\n     return convertedPrice.toString()\r\n   }\r\n \r\n   // Convert price from any currency to EUR\r\n"
                },
                {
                    "date": 1752928677436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,18 +55,28 @@\n     \r\n     const targetCurrency = getCurrencyByCode(targetCurrencyCode)\r\n     if (!targetCurrency) return priceInEUR\r\n     \r\n-    // Database'deki değerler TRY bazında: EUR=37.4671, USD=35.125, GBP=41.135, TRY=1\r\n-    // 10 EUR = 10 × 37.4671 = 374.671 TRY\r\n-    // 374.671 TRY = 374.671 ÷ 35.125 = 10.67 USD\r\n+    // Eğer hedef para birimi EUR ise, direkt döndür\r\n+    if (targetCurrencyCode === 'EUR') {\r\n+      return parseFloat(priceInEUR).toString()\r\n+    }\r\n+    \r\n+    // API'den gelen currency oranları TRY bazında\r\n+    // EUR=37.4671, USD=35.125, GBP=41.135, TRY=1\r\n+    // Bu oranlar 1 EUR = 37.4671 TRY, 1 USD = 35.125 TRY şeklinde\r\n+    \r\n     const eurCurrency = getCurrencyByCode('EUR')\r\n     if (!eurCurrency) return priceInEUR\r\n     \r\n-    // Önce EUR'yu TRY'ye çevir, sonra hedef currency'ye çevir\r\n+    // EUR'dan TRY'ye çevir: 1 EUR = 37.4671 TRY\r\n     const priceInTRY = parseFloat(priceInEUR) * parseFloat(eurCurrency.price)\r\n+    \r\n+    // TRY'den hedef para birimine çevir: 1 TRY = 1/35.125 USD\r\n     const convertedPrice = priceInTRY / parseFloat(targetCurrency.price)\r\n-    // Tam hassasiyet döndür, formatPrice fonksiyonu 2 basamak yapacak\r\n+    \r\n+    console.log(`Currency conversion: ${priceInEUR} EUR = ${priceInTRY} TRY = ${convertedPrice} ${targetCurrencyCode}`)\r\n+    \r\n     return convertedPrice.toString()\r\n   }\r\n \r\n   // Convert price from any currency to EUR\r\n"
                },
                {
                    "date": 1752928885216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,8 +67,15 @@\n     \r\n     const eurCurrency = getCurrencyByCode('EUR')\r\n     if (!eurCurrency) return priceInEUR\r\n     \r\n+    // Eğer hedef para birimi TRY ise, direkt EUR'dan TRY'ye çevir\r\n+    if (targetCurrencyCode === 'TRY') {\r\n+      const convertedPrice = parseFloat(priceInEUR) * parseFloat(eurCurrency.price)\r\n+      console.log(`EUR to TRY: ${priceInEUR} EUR = ${convertedPrice} TRY`)\r\n+      return convertedPrice.toString()\r\n+    }\r\n+    \r\n     // EUR'dan TRY'ye çevir: 1 EUR = 37.4671 TRY\r\n     const priceInTRY = parseFloat(priceInEUR) * parseFloat(eurCurrency.price)\r\n     \r\n     // TRY'den hedef para birimine çevir: 1 TRY = 1/35.125 USD\r\n"
                },
                {
                    "date": 1752928935594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,16 @@\n       }\r\n       \r\n       const data = await response.json()\r\n       currencies.value = data || []\r\n+      \r\n+      // Debug: Currency oranlarını kontrol et\r\n+      console.log('=== CURRENCY API DEBUG ===')\r\n+      console.log('Currency API Response:', data)\r\n+      data.forEach(currency => {\r\n+        console.log(`${currency.currency}: ${currency.price} (${currency.icon})`)\r\n+      })\r\n+      console.log('=== END CURRENCY DEBUG ===')\r\n     } catch (err) {\r\n       error.value = 'Failed to load currencies'\r\n       console.error('Error fetching currencies:', err)\r\n     } finally {\r\n"
                },
                {
                    "date": 1752929004483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,12 +82,10 @@\n       console.log(`EUR to TRY: ${priceInEUR} EUR = ${convertedPrice} TRY`)\r\n       return convertedPrice.toString()\r\n     }\r\n     \r\n-    // EUR'dan TRY'ye çevir: 1 EUR = 37.4671 TRY\r\n+    // Diğer para birimleri için: EUR → TRY → Hedef para birimi\r\n     const priceInTRY = parseFloat(priceInEUR) * parseFloat(eurCurrency.price)\r\n-    \r\n-    // TRY'den hedef para birimine çevir: 1 TRY = 1/35.125 USD\r\n     const convertedPrice = priceInTRY / parseFloat(targetCurrency.price)\r\n     \r\n     console.log(`Currency conversion: ${priceInEUR} EUR = ${priceInTRY} TRY = ${convertedPrice} ${targetCurrencyCode}`)\r\n     \r\n"
                },
                {
                    "date": 1752929891879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,156 @@\n+import { ref, computed } from 'vue'\r\n+\r\n+export const useCurrencyStore = () => {\r\n+  const currencies = ref([])\r\n+  const loading = ref(false)\r\n+  const error = ref(null)\r\n+  // Reaktif current currency - varsayılan EUR\r\n+  const currentCurrencyCode = ref(localStorage.getItem('selectedCurrency') || 'EUR')\r\n+\r\n+  // Fetch currencies from API\r\n+  const fetchCurrencies = async () => {\r\n+    loading.value = true\r\n+    error.value = null\r\n+    \r\n+    try {\r\n+      const response = await fetch('https://searchyourtour.com/api/currencies?token=ad5257a5-efdd-4314-9e5e-b56aabe321f1')\r\n+      if (!response.ok) {\r\n+        throw new Error('Failed to fetch currencies')\r\n+      }\r\n+      \r\n+      const data = await response.json()\r\n+      currencies.value = data || []\r\n+      \r\n+      // Debug: Currency oranlarını kontrol et\r\n+      console.log('=== CURRENCY API DEBUG ===')\r\n+      console.log('Currency API Response:', data)\r\n+      data.forEach(currency => {\r\n+        console.log(`${currency.currency}: ${currency.price} (${currency.icon})`)\r\n+      })\r\n+      console.log('=== END CURRENCY DEBUG ===')\r\n+    } catch (err) {\r\n+      error.value = 'Failed to load currencies'\r\n+      console.error('Error fetching currencies:', err)\r\n+    } finally {\r\n+      loading.value = false\r\n+    }\r\n+  }\r\n+\r\n+  // Get current currency from reactive ref\r\n+  const getCurrentCurrency = () => {\r\n+    return currentCurrencyCode.value\r\n+  }\r\n+\r\n+  // Set current currency in localStorage and reactive ref\r\n+  const setCurrentCurrency = (currencyCode) => {\r\n+    localStorage.setItem('selectedCurrency', currencyCode)\r\n+    currentCurrencyCode.value = currencyCode\r\n+  }\r\n+\r\n+  // Get currency by code\r\n+  const getCurrencyByCode = (code) => {\r\n+    return currencies.value.find(c => c.currency === code)\r\n+  }\r\n+\r\n+  // Get currency by ID\r\n+  const getCurrencyById = (id) => {\r\n+    return currencies.value.find(c => c.id === id)\r\n+  }\r\n+\r\n+  // Convert price from EUR to target currency\r\n+  const convertPrice = (priceInEUR, targetCurrencyCode) => {\r\n+    if (!priceInEUR || !targetCurrencyCode) return priceInEUR\r\n+    \r\n+    const targetCurrency = getCurrencyByCode(targetCurrencyCode)\r\n+    if (!targetCurrency) return priceInEUR\r\n+    \r\n+    // Eğer hedef para birimi EUR ise, direkt döndür\r\n+    if (targetCurrencyCode === 'EUR') {\r\n+      return parseFloat(priceInEUR).toString()\r\n+    }\r\n+    \r\n+    // API'den gelen currency oranları TRY bazında\r\n+    // EUR=37.4671, USD=35.125, GBP=41.135, TRY=1\r\n+    // Bu oranlar 1 EUR = 37.4671 TRY, 1 USD = 35.125 TRY şeklinde\r\n+    \r\n+    const eurCurrency = getCurrencyByCode('EUR')\r\n+    if (!eurCurrency) return priceInEUR\r\n+    \r\n+    // Eğer hedef para birimi TRY ise, direkt EUR'dan TRY'ye çevir\r\n+    if (targetCurrencyCode === 'TRY') {\r\n+      const convertedPrice = parseFloat(priceInEUR) * parseFloat(eurCurrency.price)\r\n+      console.log(`EUR to TRY: ${priceInEUR} EUR = ${convertedPrice} TRY`)\r\n+      return convertedPrice.toString()\r\n+    }\r\n+    \r\n+    // Diğer para birimleri için: EUR → TRY → Hedef para birimi\r\n+    const priceInTRY = parseFloat(priceInEUR) * parseFloat(eurCurrency.price)\r\n+    const convertedPrice = priceInTRY / parseFloat(targetCurrency.price)\r\n+    \r\n+    console.log(`Currency conversion: ${priceInEUR} EUR = ${priceInTRY} TRY = ${convertedPrice} ${targetCurrencyCode}`)\r\n+    \r\n+    return convertedPrice.toString()\r\n+  }\r\n+\r\n+  // Convert price from any currency to EUR\r\n+  const convertToEUR = (price, fromCurrencyCode) => {\r\n+    if (!price || !fromCurrencyCode) return price\r\n+    \r\n+    const fromCurrency = getCurrencyByCode(fromCurrencyCode)\r\n+    if (!fromCurrency) return price\r\n+    \r\n+    // Convert to EUR using currency rates\r\n+    const eurCurrency = getCurrencyByCode('EUR')\r\n+    if (!eurCurrency) return price\r\n+    \r\n+    // Önce TRY'ye çevir, sonra EUR'ya çevir\r\n+    const priceInTRY = parseFloat(price) * parseFloat(fromCurrency.price)\r\n+    const convertedPrice = priceInTRY / parseFloat(eurCurrency.price)\r\n+    // Tam hassasiyet döndür\r\n+    return convertedPrice.toString()\r\n+  }\r\n+\r\n+  // Format price with currency symbol for display (2 decimal places)\r\n+  const formatPrice = (price, currencyCode) => {\r\n+    if (!price) return ''\r\n+    \r\n+    const currency = getCurrencyByCode(currencyCode)\r\n+    if (!currency) return `${price}`\r\n+    \r\n+    // Önyüzde gösterim için 2 basamak\r\n+    const displayPrice = parseFloat(price).toFixed(2)\r\n+    return `${currency.icon}${displayPrice}`\r\n+  }\r\n+\r\n+  // Format price with full precision for payment processing\r\n+  const formatPriceForPayment = (price, currencyCode) => {\r\n+    if (!price) return ''\r\n+    \r\n+    const currency = getCurrencyByCode(currencyCode)\r\n+    if (!currency) return `${price}`\r\n+    \r\n+    // Ödeme için tam hassasiyet\r\n+    return `${currency.icon}${price}`\r\n+  }\r\n+\r\n+  // Get current currency info\r\n+  const currentCurrency = computed(() => {\r\n+    return getCurrencyByCode(currentCurrencyCode.value)\r\n+  })\r\n+\r\n+  return {\r\n+    currencies,\r\n+    loading,\r\n+    error,\r\n+    fetchCurrencies,\r\n+    getCurrentCurrency,\r\n+    setCurrentCurrency,\r\n+    getCurrencyByCode,\r\n+    getCurrencyById,\r\n+    convertPrice,\r\n+    convertToEUR,\r\n+    formatPrice,\r\n+    formatPriceForPayment,\r\n+    currentCurrency\r\n+  }\r\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752929901470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n     \r\n     const targetCurrency = getCurrencyByCode(targetCurrencyCode)\r\n     if (!targetCurrency) return priceInEUR\r\n     \r\n-    // Eğer hedef para birimi EUR ise, direkt döndür\r\n+    // Eğer hedef para birimi EUR ise, direkt döndür (çevirme yapma)\r\n     if (targetCurrencyCode === 'EUR') {\r\n       return parseFloat(priceInEUR).toString()\r\n     }\r\n     \r\n@@ -75,16 +75,9 @@\n     \r\n     const eurCurrency = getCurrencyByCode('EUR')\r\n     if (!eurCurrency) return priceInEUR\r\n     \r\n-    // Eğer hedef para birimi TRY ise, direkt EUR'dan TRY'ye çevir\r\n-    if (targetCurrencyCode === 'TRY') {\r\n-      const convertedPrice = parseFloat(priceInEUR) * parseFloat(eurCurrency.price)\r\n-      console.log(`EUR to TRY: ${priceInEUR} EUR = ${convertedPrice} TRY`)\r\n-      return convertedPrice.toString()\r\n-    }\r\n-    \r\n-    // Diğer para birimleri için: EUR → TRY → Hedef para birimi\r\n+    // EUR'dan hedef para birimine çevir\r\n     const priceInTRY = parseFloat(priceInEUR) * parseFloat(eurCurrency.price)\r\n     const convertedPrice = priceInTRY / parseFloat(targetCurrency.price)\r\n     \r\n     console.log(`Currency conversion: ${priceInEUR} EUR = ${priceInTRY} TRY = ${convertedPrice} ${targetCurrencyCode}`)\r\n@@ -152,161 +145,5 @@\n     formatPrice,\r\n     formatPriceForPayment,\r\n     currentCurrency\r\n   }\r\n-} \n-import { ref, computed } from 'vue'\r\n-\r\n-export const useCurrencyStore = () => {\r\n-  const currencies = ref([])\r\n-  const loading = ref(false)\r\n-  const error = ref(null)\r\n-  // Reaktif current currency\r\n-  const currentCurrencyCode = ref(localStorage.getItem('selectedCurrency') || 'EUR')\r\n-\r\n-  // Fetch currencies from API\r\n-  const fetchCurrencies = async () => {\r\n-    loading.value = true\r\n-    error.value = null\r\n-    \r\n-    try {\r\n-      const response = await fetch('https://searchyourtour.com/api/currencies?token=ad5257a5-efdd-4314-9e5e-b56aabe321f1')\r\n-      if (!response.ok) {\r\n-        throw new Error('Failed to fetch currencies')\r\n-      }\r\n-      \r\n-      const data = await response.json()\r\n-      currencies.value = data || []\r\n-      \r\n-      // Debug: Currency oranlarını kontrol et\r\n-      console.log('=== CURRENCY API DEBUG ===')\r\n-      console.log('Currency API Response:', data)\r\n-      data.forEach(currency => {\r\n-        console.log(`${currency.currency}: ${currency.price} (${currency.icon})`)\r\n-      })\r\n-      console.log('=== END CURRENCY DEBUG ===')\r\n-    } catch (err) {\r\n-      error.value = 'Failed to load currencies'\r\n-      console.error('Error fetching currencies:', err)\r\n-    } finally {\r\n-      loading.value = false\r\n-    }\r\n-  }\r\n-\r\n-  // Get current currency from reactive ref\r\n-  const getCurrentCurrency = () => {\r\n-    return currentCurrencyCode.value\r\n-  }\r\n-\r\n-  // Set current currency in localStorage and reactive ref\r\n-  const setCurrentCurrency = (currencyCode) => {\r\n-    localStorage.setItem('selectedCurrency', currencyCode)\r\n-    currentCurrencyCode.value = currencyCode\r\n-  }\r\n-\r\n-  // Get currency by code\r\n-  const getCurrencyByCode = (code) => {\r\n-    return currencies.value.find(c => c.currency === code)\r\n-  }\r\n-\r\n-  // Get currency by ID\r\n-  const getCurrencyById = (id) => {\r\n-    return currencies.value.find(c => c.id === id)\r\n-  }\r\n-\r\n-  // Convert price from EUR to target currency\r\n-  const convertPrice = (priceInEUR, targetCurrencyCode) => {\r\n-    if (!priceInEUR || !targetCurrencyCode) return priceInEUR\r\n-    \r\n-    const targetCurrency = getCurrencyByCode(targetCurrencyCode)\r\n-    if (!targetCurrency) return priceInEUR\r\n-    \r\n-    // Eğer hedef para birimi EUR ise, direkt döndür\r\n-    if (targetCurrencyCode === 'EUR') {\r\n-      return parseFloat(priceInEUR).toString()\r\n-    }\r\n-    \r\n-    // API'den gelen currency oranları TRY bazında\r\n-    // EUR=37.4671, USD=35.125, GBP=41.135, TRY=1\r\n-    // Bu oranlar 1 EUR = 37.4671 TRY, 1 USD = 35.125 TRY şeklinde\r\n-    \r\n-    const eurCurrency = getCurrencyByCode('EUR')\r\n-    if (!eurCurrency) return priceInEUR\r\n-    \r\n-    // Eğer hedef para birimi TRY ise, direkt EUR'dan TRY'ye çevir\r\n-    if (targetCurrencyCode === 'TRY') {\r\n-      const convertedPrice = parseFloat(priceInEUR) * parseFloat(eurCurrency.price)\r\n-      console.log(`EUR to TRY: ${priceInEUR} EUR = ${convertedPrice} TRY`)\r\n-      return convertedPrice.toString()\r\n-    }\r\n-    \r\n-    // Diğer para birimleri için: EUR → TRY → Hedef para birimi\r\n-    const priceInTRY = parseFloat(priceInEUR) * parseFloat(eurCurrency.price)\r\n-    const convertedPrice = priceInTRY / parseFloat(targetCurrency.price)\r\n-    \r\n-    console.log(`Currency conversion: ${priceInEUR} EUR = ${priceInTRY} TRY = ${convertedPrice} ${targetCurrencyCode}`)\r\n-    \r\n-    return convertedPrice.toString()\r\n-  }\r\n-\r\n-  // Convert price from any currency to EUR\r\n-  const convertToEUR = (price, fromCurrencyCode) => {\r\n-    if (!price || !fromCurrencyCode) return price\r\n-    \r\n-    const fromCurrency = getCurrencyByCode(fromCurrencyCode)\r\n-    if (!fromCurrency) return price\r\n-    \r\n-    // Convert to EUR using currency rates\r\n-    const eurCurrency = getCurrencyByCode('EUR')\r\n-    if (!eurCurrency) return price\r\n-    \r\n-    // Önce TRY'ye çevir, sonra EUR'ya çevir\r\n-    const priceInTRY = parseFloat(price) * parseFloat(fromCurrency.price)\r\n-    const convertedPrice = priceInTRY / parseFloat(eurCurrency.price)\r\n-    // Tam hassasiyet döndür\r\n-    return convertedPrice.toString()\r\n-  }\r\n-\r\n-  // Format price with currency symbol for display (2 decimal places)\r\n-  const formatPrice = (price, currencyCode) => {\r\n-    if (!price) return ''\r\n-    \r\n-    const currency = getCurrencyByCode(currencyCode)\r\n-    if (!currency) return `${price}`\r\n-    \r\n-    // Önyüzde gösterim için 2 basamak\r\n-    const displayPrice = parseFloat(price).toFixed(2)\r\n-    return `${currency.icon}${displayPrice}`\r\n-  }\r\n-\r\n-  // Format price with full precision for payment processing\r\n-  const formatPriceForPayment = (price, currencyCode) => {\r\n-    if (!price) return ''\r\n-    \r\n-    const currency = getCurrencyByCode(currencyCode)\r\n-    if (!currency) return `${price}`\r\n-    \r\n-    // Ödeme için tam hassasiyet\r\n-    return `${currency.icon}${price}`\r\n-  }\r\n-\r\n-  // Get current currency info\r\n-  const currentCurrency = computed(() => {\r\n-    return getCurrencyByCode(currentCurrencyCode.value)\r\n-  })\r\n-\r\n-  return {\r\n-    currencies,\r\n-    loading,\r\n-    error,\r\n-    fetchCurrencies,\r\n-    getCurrentCurrency,\r\n-    setCurrentCurrency,\r\n-    getCurrencyByCode,\r\n-    getCurrencyById,\r\n-    convertPrice,\r\n-    convertToEUR,\r\n-    formatPrice,\r\n-    formatPriceForPayment,\r\n-    currentCurrency\r\n-  }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752930182404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,11 @@\n   }\r\n \r\n   // Get currency by code\r\n   const getCurrencyByCode = (code) => {\r\n-    return currencies.value.find(c => c.currency === code)\r\n+    const currency = currencies.value.find(c => c.currency === code)\r\n+    console.log(`getCurrencyByCode(${code}):`, currency)\r\n+    return currency\r\n   }\r\n \r\n   // Get currency by ID\r\n   const getCurrencyById = (id) => {\r\n"
                },
                {
                    "date": 1752930193663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,9 @@\n   }\r\n \r\n   // Get current currency from reactive ref\r\n   const getCurrentCurrency = () => {\r\n+    console.log('getCurrentCurrency():', currentCurrencyCode.value)\r\n     return currentCurrencyCode.value\r\n   }\r\n \r\n   // Set current currency in localStorage and reactive ref\r\n@@ -109,13 +110,18 @@\n   const formatPrice = (price, currencyCode) => {\r\n     if (!price) return ''\r\n     \r\n     const currency = getCurrencyByCode(currencyCode)\r\n-    if (!currency) return `${price}`\r\n+    if (!currency) {\r\n+      console.warn(`Currency not found for code: ${currencyCode}`)\r\n+      return `${price}`\r\n+    }\r\n     \r\n     // Önyüzde gösterim için 2 basamak\r\n     const displayPrice = parseFloat(price).toFixed(2)\r\n-    return `${currency.icon}${displayPrice}`\r\n+    const result = `${currency.icon}${displayPrice}`\r\n+    console.log(`formatPrice(${price}, ${currencyCode}):`, result)\r\n+    return result\r\n   }\r\n \r\n   // Format price with full precision for payment processing\r\n   const formatPriceForPayment = (price, currencyCode) => {\r\n"
                },
                {
                    "date": 1752930432635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n export const useCurrencyStore = () => {\r\n   const currencies = ref([])\r\n   const loading = ref(false)\r\n   const error = ref(null)\r\n-  // Reaktif current currency - varsayılan EUR\r\n+  // Reaktif current currency\r\n   const currentCurrencyCode = ref(localStorage.getItem('selectedCurrency') || 'EUR')\r\n \r\n   // Fetch currencies from API\r\n   const fetchCurrencies = async () => {\r\n@@ -19,16 +19,8 @@\n       }\r\n       \r\n       const data = await response.json()\r\n       currencies.value = data || []\r\n-      \r\n-      // Debug: Currency oranlarını kontrol et\r\n-      console.log('=== CURRENCY API DEBUG ===')\r\n-      console.log('Currency API Response:', data)\r\n-      data.forEach(currency => {\r\n-        console.log(`${currency.currency}: ${currency.price} (${currency.icon})`)\r\n-      })\r\n-      console.log('=== END CURRENCY DEBUG ===')\r\n     } catch (err) {\r\n       error.value = 'Failed to load currencies'\r\n       console.error('Error fetching currencies:', err)\r\n     } finally {\r\n@@ -37,9 +29,8 @@\n   }\r\n \r\n   // Get current currency from reactive ref\r\n   const getCurrentCurrency = () => {\r\n-    console.log('getCurrentCurrency():', currentCurrencyCode.value)\r\n     return currentCurrencyCode.value\r\n   }\r\n \r\n   // Set current currency in localStorage and reactive ref\r\n@@ -49,11 +40,9 @@\n   }\r\n \r\n   // Get currency by code\r\n   const getCurrencyByCode = (code) => {\r\n-    const currency = currencies.value.find(c => c.currency === code)\r\n-    console.log(`getCurrencyByCode(${code}):`, currency)\r\n-    return currency\r\n+    return currencies.value.find(c => c.currency === code)\r\n   }\r\n \r\n   // Get currency by ID\r\n   const getCurrencyById = (id) => {\r\n@@ -66,9 +55,9 @@\n     \r\n     const targetCurrency = getCurrencyByCode(targetCurrencyCode)\r\n     if (!targetCurrency) return priceInEUR\r\n     \r\n-    // Eğer hedef para birimi EUR ise, direkt döndür (çevirme yapma)\r\n+    // Eğer hedef para birimi EUR ise, direkt döndür\r\n     if (targetCurrencyCode === 'EUR') {\r\n       return parseFloat(priceInEUR).toString()\r\n     }\r\n     \r\n@@ -78,10 +67,12 @@\n     \r\n     const eurCurrency = getCurrencyByCode('EUR')\r\n     if (!eurCurrency) return priceInEUR\r\n     \r\n-    // EUR'dan hedef para birimine çevir\r\n+    // EUR'dan TRY'ye çevir: 1 EUR = 37.4671 TRY\r\n     const priceInTRY = parseFloat(priceInEUR) * parseFloat(eurCurrency.price)\r\n+    \r\n+    // TRY'den hedef para birimine çevir: 1 TRY = 1/35.125 USD\r\n     const convertedPrice = priceInTRY / parseFloat(targetCurrency.price)\r\n     \r\n     console.log(`Currency conversion: ${priceInEUR} EUR = ${priceInTRY} TRY = ${convertedPrice} ${targetCurrencyCode}`)\r\n     \r\n@@ -110,18 +101,13 @@\n   const formatPrice = (price, currencyCode) => {\r\n     if (!price) return ''\r\n     \r\n     const currency = getCurrencyByCode(currencyCode)\r\n-    if (!currency) {\r\n-      console.warn(`Currency not found for code: ${currencyCode}`)\r\n-      return `${price}`\r\n-    }\r\n+    if (!currency) return `${price}`\r\n     \r\n     // Önyüzde gösterim için 2 basamak\r\n     const displayPrice = parseFloat(price).toFixed(2)\r\n-    const result = `${currency.icon}${displayPrice}`\r\n-    console.log(`formatPrice(${price}, ${currencyCode}):`, result)\r\n-    return result\r\n+    return `${currency.icon}${displayPrice}`\r\n   }\r\n \r\n   // Format price with full precision for payment processing\r\n   const formatPriceForPayment = (price, currencyCode) => {\r\n@@ -138,8 +124,13 @@\n   const currentCurrency = computed(() => {\r\n     return getCurrencyByCode(currentCurrencyCode.value)\r\n   })\r\n \r\n+  // Reactive current currency code for components to watch\r\n+  const reactiveCurrentCurrency = computed(() => {\r\n+    return currentCurrencyCode.value\r\n+  })\r\n+\r\n   return {\r\n     currencies,\r\n     loading,\r\n     error,\r\n"
                },
                {
                    "date": 1752930438123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,7 +142,8 @@\n     convertPrice,\r\n     convertToEUR,\r\n     formatPrice,\r\n     formatPriceForPayment,\r\n-    currentCurrency\r\n+    currentCurrency,\r\n+    reactiveCurrentCurrency\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752930564144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,13 +124,8 @@\n   const currentCurrency = computed(() => {\r\n     return getCurrencyByCode(currentCurrencyCode.value)\r\n   })\r\n \r\n-  // Reactive current currency code for components to watch\r\n-  const reactiveCurrentCurrency = computed(() => {\r\n-    return currentCurrencyCode.value\r\n-  })\r\n-\r\n   return {\r\n     currencies,\r\n     loading,\r\n     error,\r\n@@ -142,8 +137,7 @@\n     convertPrice,\r\n     convertToEUR,\r\n     formatPrice,\r\n     formatPriceForPayment,\r\n-    currentCurrency,\r\n-    reactiveCurrentCurrency\r\n+    currentCurrency\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752930656129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,8 +124,13 @@\n   const currentCurrency = computed(() => {\r\n     return getCurrencyByCode(currentCurrencyCode.value)\r\n   })\r\n \r\n+  // Reactive current currency code for components to watch\r\n+  const reactiveCurrentCurrency = computed(() => {\r\n+    return currentCurrencyCode.value\r\n+  })\r\n+\r\n   return {\r\n     currencies,\r\n     loading,\r\n     error,\r\n@@ -137,7 +142,8 @@\n     convertPrice,\r\n     convertToEUR,\r\n     formatPrice,\r\n     formatPriceForPayment,\r\n-    currentCurrency\r\n+    currentCurrency,\r\n+    reactiveCurrentCurrency\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752930829261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,20 @@\n   const formatPrice = (price, currencyCode) => {\r\n     if (!price) return ''\r\n     \r\n     const currency = getCurrencyByCode(currencyCode)\r\n-    if (!currency) return `${price}`\r\n+    if (!currency) {\r\n+      // Fallback semboller\r\n+      const fallbackSymbols = {\r\n+        'EUR': '€',\r\n+        'USD': '$',\r\n+        'GBP': '£',\r\n+        'TRY': '₺'\r\n+      }\r\n+      const symbol = fallbackSymbols[currencyCode] || currencyCode\r\n+      const displayPrice = parseFloat(price).toFixed(2)\r\n+      return `${symbol}${displayPrice}`\r\n+    }\r\n     \r\n     // Önyüzde gösterim için 2 basamak\r\n     const displayPrice = parseFloat(price).toFixed(2)\r\n     return `${currency.icon}${displayPrice}`\r\n"
                },
                {
                    "date": 1752930880981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,10 +34,12 @@\n   }\r\n \r\n   // Set current currency in localStorage and reactive ref\r\n   const setCurrentCurrency = (currencyCode) => {\r\n+    console.log('setCurrentCurrency called with:', currencyCode)\r\n     localStorage.setItem('selectedCurrency', currencyCode)\r\n     currentCurrencyCode.value = currencyCode\r\n+    console.log('currentCurrencyCode.value updated to:', currentCurrencyCode.value)\r\n   }\r\n \r\n   // Get currency by code\r\n   const getCurrencyByCode = (code) => {\r\n"
                },
                {
                    "date": 1752931724196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,12 +34,10 @@\n   }\r\n \r\n   // Set current currency in localStorage and reactive ref\r\n   const setCurrentCurrency = (currencyCode) => {\r\n-    console.log('setCurrentCurrency called with:', currencyCode)\r\n     localStorage.setItem('selectedCurrency', currencyCode)\r\n     currentCurrencyCode.value = currencyCode\r\n-    console.log('currentCurrencyCode.value updated to:', currentCurrencyCode.value)\r\n   }\r\n \r\n   // Get currency by code\r\n   const getCurrencyByCode = (code) => {\r\n@@ -103,20 +101,9 @@\n   const formatPrice = (price, currencyCode) => {\r\n     if (!price) return ''\r\n     \r\n     const currency = getCurrencyByCode(currencyCode)\r\n-    if (!currency) {\r\n-      // Fallback semboller\r\n-      const fallbackSymbols = {\r\n-        'EUR': '€',\r\n-        'USD': '$',\r\n-        'GBP': '£',\r\n-        'TRY': '₺'\r\n-      }\r\n-      const symbol = fallbackSymbols[currencyCode] || currencyCode\r\n-      const displayPrice = parseFloat(price).toFixed(2)\r\n-      return `${symbol}${displayPrice}`\r\n-    }\r\n+    if (!currency) return `${price}`\r\n     \r\n     // Önyüzde gösterim için 2 basamak\r\n     const displayPrice = parseFloat(price).toFixed(2)\r\n     return `${currency.icon}${displayPrice}`\r\n@@ -137,13 +124,8 @@\n   const currentCurrency = computed(() => {\r\n     return getCurrencyByCode(currentCurrencyCode.value)\r\n   })\r\n \r\n-  // Reactive current currency code for components to watch\r\n-  const reactiveCurrentCurrency = computed(() => {\r\n-    return currentCurrencyCode.value\r\n-  })\r\n-\r\n   return {\r\n     currencies,\r\n     loading,\r\n     error,\r\n@@ -155,8 +137,7 @@\n     convertPrice,\r\n     convertToEUR,\r\n     formatPrice,\r\n     formatPriceForPayment,\r\n-    currentCurrency,\r\n-    reactiveCurrentCurrency\r\n+    currentCurrency\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752931766358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,20 @@\n   const formatPrice = (price, currencyCode) => {\r\n     if (!price) return ''\r\n     \r\n     const currency = getCurrencyByCode(currencyCode)\r\n-    if (!currency) return `${price}`\r\n+    if (!currency) {\r\n+      // Fallback semboller\r\n+      const fallbackSymbols = {\r\n+        'EUR': '€',\r\n+        'USD': '$',\r\n+        'GBP': '£',\r\n+        'TRY': '₺'\r\n+      }\r\n+      const symbol = fallbackSymbols[currencyCode] || currencyCode\r\n+      const displayPrice = parseFloat(price).toFixed(2)\r\n+      return `${symbol}${displayPrice}`\r\n+    }\r\n     \r\n     // Önyüzde gösterim için 2 basamak\r\n     const displayPrice = parseFloat(price).toFixed(2)\r\n     return `${currency.icon}${displayPrice}`\r\n"
                },
                {
                    "date": 1752931776381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,8 +135,13 @@\n   const currentCurrency = computed(() => {\r\n     return getCurrencyByCode(currentCurrencyCode.value)\r\n   })\r\n \r\n+  // Reactive current currency code for components to watch\r\n+  const reactiveCurrentCurrency = computed(() => {\r\n+    return currentCurrencyCode.value\r\n+  })\r\n+\r\n   return {\r\n     currencies,\r\n     loading,\r\n     error,\r\n@@ -148,7 +153,8 @@\n     convertPrice,\r\n     convertToEUR,\r\n     formatPrice,\r\n     formatPriceForPayment,\r\n-    currentCurrency\r\n+    currentCurrency,\r\n+    reactiveCurrentCurrency\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752931846710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,20 +101,9 @@\n   const formatPrice = (price, currencyCode) => {\r\n     if (!price) return ''\r\n     \r\n     const currency = getCurrencyByCode(currencyCode)\r\n-    if (!currency) {\r\n-      // Fallback semboller\r\n-      const fallbackSymbols = {\r\n-        'EUR': '€',\r\n-        'USD': '$',\r\n-        'GBP': '£',\r\n-        'TRY': '₺'\r\n-      }\r\n-      const symbol = fallbackSymbols[currencyCode] || currencyCode\r\n-      const displayPrice = parseFloat(price).toFixed(2)\r\n-      return `${symbol}${displayPrice}`\r\n-    }\r\n+    if (!currency) return `${price}`\r\n     \r\n     // Önyüzde gösterim için 2 basamak\r\n     const displayPrice = parseFloat(price).toFixed(2)\r\n     return `${currency.icon}${displayPrice}`\r\n@@ -135,13 +124,8 @@\n   const currentCurrency = computed(() => {\r\n     return getCurrencyByCode(currentCurrencyCode.value)\r\n   })\r\n \r\n-  // Reactive current currency code for components to watch\r\n-  const reactiveCurrentCurrency = computed(() => {\r\n-    return currentCurrencyCode.value\r\n-  })\r\n-\r\n   return {\r\n     currencies,\r\n     loading,\r\n     error,\r\n@@ -153,8 +137,7 @@\n     convertPrice,\r\n     convertToEUR,\r\n     formatPrice,\r\n     formatPriceForPayment,\r\n-    currentCurrency,\r\n-    reactiveCurrentCurrency\r\n+    currentCurrency\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752931970117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,8 +124,13 @@\n   const currentCurrency = computed(() => {\r\n     return getCurrencyByCode(currentCurrencyCode.value)\r\n   })\r\n \r\n+  // Reactive current currency code for components to watch\r\n+  const reactiveCurrentCurrency = computed(() => {\r\n+    return currentCurrencyCode.value\r\n+  })\r\n+\r\n   return {\r\n     currencies,\r\n     loading,\r\n     error,\r\n@@ -137,7 +142,8 @@\n     convertPrice,\r\n     convertToEUR,\r\n     formatPrice,\r\n     formatPriceForPayment,\r\n-    currentCurrency\r\n+    currentCurrency,\r\n+    reactiveCurrentCurrency\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752932070385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,20 @@\n   const formatPrice = (price, currencyCode) => {\r\n     if (!price) return ''\r\n     \r\n     const currency = getCurrencyByCode(currencyCode)\r\n-    if (!currency) return `${price}`\r\n+    if (!currency) {\r\n+      // Fallback semboller\r\n+      const fallbackSymbols = {\r\n+        'EUR': '€',\r\n+        'USD': '$',\r\n+        'GBP': '£',\r\n+        'TRY': '₺'\r\n+      }\r\n+      const symbol = fallbackSymbols[currencyCode] || currencyCode\r\n+      const displayPrice = parseFloat(price).toFixed(2)\r\n+      return `${symbol}${displayPrice}`\r\n+    }\r\n     \r\n     // Önyüzde gösterim için 2 basamak\r\n     const displayPrice = parseFloat(price).toFixed(2)\r\n     return `${currency.icon}${displayPrice}`\r\n"
                },
                {
                    "date": 1752932939591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,20 +101,9 @@\n   const formatPrice = (price, currencyCode) => {\r\n     if (!price) return ''\r\n     \r\n     const currency = getCurrencyByCode(currencyCode)\r\n-    if (!currency) {\r\n-      // Fallback semboller\r\n-      const fallbackSymbols = {\r\n-        'EUR': '€',\r\n-        'USD': '$',\r\n-        'GBP': '£',\r\n-        'TRY': '₺'\r\n-      }\r\n-      const symbol = fallbackSymbols[currencyCode] || currencyCode\r\n-      const displayPrice = parseFloat(price).toFixed(2)\r\n-      return `${symbol}${displayPrice}`\r\n-    }\r\n+    if (!currency) return `${price}`\r\n     \r\n     // Önyüzde gösterim için 2 basamak\r\n     const displayPrice = parseFloat(price).toFixed(2)\r\n     return `${currency.icon}${displayPrice}`\r\n@@ -135,13 +124,8 @@\n   const currentCurrency = computed(() => {\r\n     return getCurrencyByCode(currentCurrencyCode.value)\r\n   })\r\n \r\n-  // Reactive current currency code for components to watch\r\n-  const reactiveCurrentCurrency = computed(() => {\r\n-    return currentCurrencyCode.value\r\n-  })\r\n-\r\n   return {\r\n     currencies,\r\n     loading,\r\n     error,\r\n@@ -153,8 +137,7 @@\n     convertPrice,\r\n     convertToEUR,\r\n     formatPrice,\r\n     formatPriceForPayment,\r\n-    currentCurrency,\r\n-    reactiveCurrentCurrency\r\n+    currentCurrency\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752933431365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,20 @@\n   const formatPrice = (price, currencyCode) => {\r\n     if (!price) return ''\r\n     \r\n     const currency = getCurrencyByCode(currencyCode)\r\n-    if (!currency) return `${price}`\r\n+    if (!currency) {\r\n+      // Fallback semboller\r\n+      const fallbackSymbols = {\r\n+        'EUR': '€',\r\n+        'USD': '$',\r\n+        'GBP': '£',\r\n+        'TRY': '₺'\r\n+      }\r\n+      const symbol = fallbackSymbols[currencyCode] || currencyCode\r\n+      const displayPrice = parseFloat(price).toFixed(2)\r\n+      return `${symbol}${displayPrice}`\r\n+    }\r\n     \r\n     // Önyüzde gösterim için 2 basamak\r\n     const displayPrice = parseFloat(price).toFixed(2)\r\n     return `${currency.icon}${displayPrice}`\r\n"
                },
                {
                    "date": 1752933437272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,8 +135,13 @@\n   const currentCurrency = computed(() => {\r\n     return getCurrencyByCode(currentCurrencyCode.value)\r\n   })\r\n \r\n+  // Reactive current currency code for components to watch\r\n+  const reactiveCurrentCurrency = computed(() => {\r\n+    return currentCurrencyCode.value\r\n+  })\r\n+\r\n   return {\r\n     currencies,\r\n     loading,\r\n     error,\r\n@@ -148,7 +153,8 @@\n     convertPrice,\r\n     convertToEUR,\r\n     formatPrice,\r\n     formatPriceForPayment,\r\n-    currentCurrency\r\n+    currentCurrency,\r\n+    reactiveCurrentCurrency\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752933538557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,11 +114,24 @@\n       const displayPrice = parseFloat(price).toFixed(2)\r\n       return `${symbol}${displayPrice}`\r\n     }\r\n     \r\n+    // Currency icon'u güvenli şekilde al\r\n+    let symbol = currency.icon\r\n+    if (typeof symbol === 'object' && symbol !== null) {\r\n+      // Eğer icon object ise, fallback semboller kullan\r\n+      const fallbackSymbols = {\r\n+        'EUR': '€',\r\n+        'USD': '$',\r\n+        'GBP': '£',\r\n+        'TRY': '₺'\r\n+      }\r\n+      symbol = fallbackSymbols[currencyCode] || currencyCode\r\n+    }\r\n+    \r\n     // Önyüzde gösterim için 2 basamak\r\n     const displayPrice = parseFloat(price).toFixed(2)\r\n-    return `${currency.icon}${displayPrice}`\r\n+    return `${symbol}${displayPrice}`\r\n   }\r\n \r\n   // Format price with full precision for payment processing\r\n   const formatPriceForPayment = (price, currencyCode) => {\r\n"
                },
                {
                    "date": 1752933548463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,12 +137,35 @@\n   const formatPriceForPayment = (price, currencyCode) => {\r\n     if (!price) return ''\r\n     \r\n     const currency = getCurrencyByCode(currencyCode)\r\n-    if (!currency) return `${price}`\r\n+    if (!currency) {\r\n+      // Fallback semboller\r\n+      const fallbackSymbols = {\r\n+        'EUR': '€',\r\n+        'USD': '$',\r\n+        'GBP': '£',\r\n+        'TRY': '₺'\r\n+      }\r\n+      const symbol = fallbackSymbols[currencyCode] || currencyCode\r\n+      return `${symbol}${price}`\r\n+    }\r\n     \r\n+    // Currency icon'u güvenli şekilde al\r\n+    let symbol = currency.icon\r\n+    if (typeof symbol === 'object' && symbol !== null) {\r\n+      // Eğer icon object ise, fallback semboller kullan\r\n+      const fallbackSymbols = {\r\n+        'EUR': '€',\r\n+        'USD': '$',\r\n+        'GBP': '£',\r\n+        'TRY': '₺'\r\n+      }\r\n+      symbol = fallbackSymbols[currencyCode] || currencyCode\r\n+    }\r\n+    \r\n     // Ödeme için tam hassasiyet\r\n-    return `${currency.icon}${price}`\r\n+    return `${symbol}${price}`\r\n   }\r\n \r\n   // Get current currency info\r\n   const currentCurrency = computed(() => {\r\n"
                },
                {
                    "date": 1752933721477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,13 @@\n   // Format price with currency symbol for display (2 decimal places)\r\n   const formatPrice = (price, currencyCode) => {\r\n     if (!price) return ''\r\n     \r\n+    console.log('formatPrice called with:', { price, currencyCode })\r\n+    \r\n     const currency = getCurrencyByCode(currencyCode)\r\n+    console.log('Found currency:', currency)\r\n+    \r\n     if (!currency) {\r\n       // Fallback semboller\r\n       const fallbackSymbols = {\r\n         'EUR': '€',\r\n@@ -111,13 +115,16 @@\n         'TRY': '₺'\r\n       }\r\n       const symbol = fallbackSymbols[currencyCode] || currencyCode\r\n       const displayPrice = parseFloat(price).toFixed(2)\r\n+      console.log('Using fallback symbol:', symbol)\r\n       return `${symbol}${displayPrice}`\r\n     }\r\n     \r\n     // Currency icon'u güvenli şekilde al\r\n     let symbol = currency.icon\r\n+    console.log('Currency icon:', symbol, 'Type:', typeof symbol)\r\n+    \r\n     if (typeof symbol === 'object' && symbol !== null) {\r\n       // Eğer icon object ise, fallback semboller kullan\r\n       const fallbackSymbols = {\r\n         'EUR': '€',\r\n@@ -125,13 +132,16 @@\n         'GBP': '£',\r\n         'TRY': '₺'\r\n       }\r\n       symbol = fallbackSymbols[currencyCode] || currencyCode\r\n+      console.log('Using fallback symbol (object detected):', symbol)\r\n     }\r\n     \r\n     // Önyüzde gösterim için 2 basamak\r\n     const displayPrice = parseFloat(price).toFixed(2)\r\n-    return `${symbol}${displayPrice}`\r\n+    const result = `${symbol}${displayPrice}`\r\n+    console.log('Final result:', result)\r\n+    return result\r\n   }\r\n \r\n   // Format price with full precision for payment processing\r\n   const formatPriceForPayment = (price, currencyCode) => {\r\n"
                }
            ],
            "date": 1752748923169,
            "name": "Commit-0",
            "content": "import { ref, computed } from 'vue'\r\n\r\nexport const useCurrencyStore = () => {\r\n  const currencies = ref([])\r\n  const loading = ref(false)\r\n  const error = ref(null)\r\n\r\n  // Fetch currencies from API\r\n  const fetchCurrencies = async () => {\r\n    loading.value = true\r\n    error.value = null\r\n    \r\n    try {\r\n      const response = await fetch('https://searchyourtour.com/api/currencies?token=ad5257a5-efdd-4314-9e5e-b56aabe321f1')\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch currencies')\r\n      }\r\n      \r\n      const data = await response.json()\r\n      currencies.value = data || []\r\n    } catch (err) {\r\n      error.value = 'Failed to load currencies'\r\n      console.error('Error fetching currencies:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  // Get current currency from localStorage\r\n  const getCurrentCurrency = () => {\r\n    return localStorage.getItem('selectedCurrency') || 'EUR'\r\n  }\r\n\r\n  // Get currency by code\r\n  const getCurrencyByCode = (code) => {\r\n    return currencies.value.find(c => c.currency === code)\r\n  }\r\n\r\n  // Get currency by ID\r\n  const getCurrencyById = (id) => {\r\n    return currencies.value.find(c => c.id === id)\r\n  }\r\n\r\n  // Convert price from TRY to target currency\r\n  const convertPrice = (priceInTRY, targetCurrencyCode) => {\r\n    if (!priceInTRY || !targetCurrencyCode) return priceInTRY\r\n    \r\n    const targetCurrency = getCurrencyByCode(targetCurrencyCode)\r\n    if (!targetCurrency) return priceInTRY\r\n    \r\n    // TRY is base currency (price = 1), so we divide by target currency price\r\n    const convertedPrice = parseFloat(priceInTRY) / parseFloat(targetCurrency.price)\r\n    return convertedPrice.toFixed(2)\r\n  }\r\n\r\n  // Convert price from any currency to TRY\r\n  const convertToTRY = (price, fromCurrencyCode) => {\r\n    if (!price || !fromCurrencyCode) return price\r\n    \r\n    const fromCurrency = getCurrencyByCode(fromCurrencyCode)\r\n    if (!fromCurrency) return price\r\n    \r\n    // Multiply by the currency price to get TRY value\r\n    return (parseFloat(price) * parseFloat(fromCurrency.price)).toFixed(2)\r\n  }\r\n\r\n  // Format price with currency symbol\r\n  const formatPrice = (price, currencyCode) => {\r\n    if (!price) return ''\r\n    \r\n    const currency = getCurrencyByCode(currencyCode)\r\n    if (!currency) return `${price}`\r\n    \r\n    return `${currency.icon}${price}`\r\n  }\r\n\r\n  // Get current currency info\r\n  const currentCurrency = computed(() => {\r\n    const code = getCurrentCurrency()\r\n    return getCurrencyByCode(code)\r\n  })\r\n\r\n  return {\r\n    currencies,\r\n    loading,\r\n    error,\r\n    fetchCurrencies,\r\n    getCurrentCurrency,\r\n    getCurrencyByCode,\r\n    getCurrencyById,\r\n    convertPrice,\r\n    convertToTRY,\r\n    formatPrice,\r\n    currentCurrency\r\n  }\r\n} "
        }
    ]
}