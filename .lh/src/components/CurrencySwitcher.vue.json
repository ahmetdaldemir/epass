{
    "sourceFile": "src/components/CurrencySwitcher.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1752742181967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752742958177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,13 +33,12 @@\n const dropdownRef = ref(null)\r\n const isDropdownOpen = ref(false)\r\n \r\n const currencies = ref([\r\n-  { code: 'TRY', name: 'Turkish Lira', symbol: '₺', id: 5 },\r\n-  { code: 'EUR', name: 'Euro', symbol: '€', id: 1 },\r\n-  { code: 'USD', name: 'US Dollar', symbol: '$', id: 2 },\r\n-  { code: 'GBP', name: 'British Pound', symbol: '£', id: 3 },\r\n-  { code: 'RUB', name: 'Russian Ruble', symbol: '₽', id: 4 }\r\n+  { code: 'EUR', name: 'Euro', symbol: '€', id: 4 },\r\n+  { code: 'USD', name: 'US Dollar', symbol: '$', id: 5 },\r\n+  { code: 'GBP', name: 'British Pound', symbol: '£', id: 6 },\r\n+  { code: 'TRY', name: 'Turkish Lira', symbol: '₺', id: 7 }\r\n ])\r\n \r\n const currentCurrency = ref(currencies.value[0]) // Default to TRY\r\n \r\n"
                },
                {
                    "date": 1752742964031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n   { code: 'GBP', name: 'British Pound', symbol: '£', id: 6 },\r\n   { code: 'TRY', name: 'Turkish Lira', symbol: '₺', id: 7 }\r\n ])\r\n \r\n-const currentCurrency = ref(currencies.value[0]) // Default to TRY\r\n+const currentCurrency = ref(currencies.value[3]) // Default to TRY\r\n \r\n // Close dropdown when clicking outside\r\n onClickOutside(dropdownRef, () => {\r\n   isDropdownOpen.value = false\r\n"
                },
                {
                    "date": 1752742971993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,8 +80,11 @@\n     const currency = currencies.value.find(c => c.code === savedCurrency)\r\n     if (currency) {\r\n       currentCurrency.value = currency\r\n     }\r\n+  } else {\r\n+    // Default to TRY if no currency is saved\r\n+    currentCurrency.value = currencies.value.find(c => c.code === 'TRY') || currencies.value[3]\r\n   }\r\n })\r\n </script>\r\n \r\n"
                },
                {
                    "date": 1752743314756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n   { code: 'GBP', name: 'British Pound', symbol: '£', id: 6 },\r\n   { code: 'TRY', name: 'Turkish Lira', symbol: '₺', id: 7 }\r\n ])\r\n \r\n-const currentCurrency = ref(currencies.value[3]) // Default to TRY\r\n+const currentCurrency = ref(currencies.value[0]) // Default to EUR\r\n \r\n // Close dropdown when clicking outside\r\n onClickOutside(dropdownRef, () => {\r\n   isDropdownOpen.value = false\r\n"
                },
                {
                    "date": 1752743321202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,10 +81,10 @@\n     if (currency) {\r\n       currentCurrency.value = currency\r\n     }\r\n   } else {\r\n-    // Default to TRY if no currency is saved\r\n-    currentCurrency.value = currencies.value.find(c => c.code === 'TRY') || currencies.value[3]\r\n+    // Default to EUR if no currency is saved\r\n+    currentCurrency.value = currencies.value.find(c => c.code === 'EUR') || currencies.value[0]\r\n   }\r\n })\r\n </script>\r\n \r\n"
                },
                {
                    "date": 1752929935054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,212 @@\n+<template>\r\n+  <div class=\"currency-switcher\">\r\n+    <div class=\"currency-dropdown\" @click=\"toggleDropdown\" ref=\"dropdownRef\">\r\n+      <div class=\"currency-display\">\r\n+        <span class=\"currency-symbol\">{{ currentCurrency.symbol }}</span>\r\n+        <span class=\"currency-code\">{{ currentCurrency.code }}</span>\r\n+        <i class=\"fas fa-chevron-down\" :class=\"{ 'rotated': isDropdownOpen }\"></i>\r\n+      </div>\r\n+      \r\n+      <div class=\"currency-options\" v-if=\"isDropdownOpen\">\r\n+        <div \r\n+          v-for=\"currency in currencies\" \r\n+          :key=\"currency.code\"\r\n+          class=\"currency-option\"\r\n+          @click=\"changeCurrency(currency.code)\"\r\n+          :class=\"{ 'active': currency.code === currentCurrency.code }\"\r\n+        >\r\n+          <span class=\"currency-symbol\">{{ currency.symbol }}</span>\r\n+          <span class=\"currency-name\">{{ currency.name }}</span>\r\n+          <span class=\"currency-code\">{{ currency.code }}</span>\r\n+        </div>\r\n+      </div>\r\n+    </div>\r\n+  </div>\r\n+</template>\r\n+\r\n+<script setup>\r\n+import { ref, onMounted, onUnmounted, computed } from 'vue'\r\n+import { onClickOutside } from '@vueuse/core'\r\n+import { useCurrencyStore } from '../stores/currency'\r\n+\r\n+const emit = defineEmits(['currency-changed'])\r\n+\r\n+const dropdownRef = ref(null)\r\n+const isDropdownOpen = ref(false)\r\n+\r\n+// Currency store'u kullan\r\n+const currencyStore = useCurrencyStore()\r\n+\r\n+// Currency store'dan currencies'ı al\r\n+const currencies = computed(() => {\r\n+  return currencyStore.currencies.map(currency => ({\r\n+    code: currency.currency,\r\n+    name: currency.name,\r\n+    symbol: currency.icon,\r\n+    id: currency.id\r\n+  }))\r\n+})\r\n+\r\n+// Current currency'yi currency store'dan al\r\n+const currentCurrency = computed(() => {\r\n+  const currentCode = currencyStore.getCurrentCurrency()\r\n+  return currencies.value.find(c => c.code === currentCode) || currencies.value[0]\r\n+})\r\n+\r\n+// Close dropdown when clicking outside\r\n+onClickOutside(dropdownRef, () => {\r\n+  isDropdownOpen.value = false\r\n+})\r\n+\r\n+const toggleDropdown = () => {\r\n+  isDropdownOpen.value = !isDropdownOpen.value\r\n+}\r\n+\r\n+const changeCurrency = (currencyCode) => {\r\n+  const currency = currencies.value.find(c => c.code === currencyCode)\r\n+  if (currency) {\r\n+    currentCurrency.value = currency\r\n+    isDropdownOpen.value = false\r\n+    \r\n+    // Save to localStorage\r\n+    localStorage.setItem('selectedCurrency', currencyCode)\r\n+    \r\n+    // Emit event for parent components\r\n+    emit('currency-changed', currencyCode)\r\n+    \r\n+    // Dispatch custom event for global listeners\r\n+    window.dispatchEvent(new CustomEvent('currency-changed', {\r\n+      detail: { \r\n+        currency: currencyCode,\r\n+        currencyId: currency.id\r\n+      }\r\n+    }))\r\n+  }\r\n+}\r\n+\r\n+// Initialize from localStorage\r\n+onMounted(() => {\r\n+  const savedCurrency = localStorage.getItem('selectedCurrency')\r\n+  if (savedCurrency) {\r\n+    const currency = currencies.value.find(c => c.code === savedCurrency)\r\n+    if (currency) {\r\n+      currentCurrency.value = currency\r\n+    }\r\n+  } else {\r\n+    // Default to EUR if no currency is saved\r\n+    currentCurrency.value = currencies.value.find(c => c.code === 'EUR') || currencies.value[0]\r\n+  }\r\n+})\r\n+</script>\r\n+\r\n+<style scoped>\r\n+.currency-switcher {\r\n+  position: relative;\r\n+  display: inline-block;\r\n+}\r\n+\r\n+.currency-dropdown {\r\n+  position: relative;\r\n+  cursor: pointer;\r\n+  user-select: none;\r\n+}\r\n+\r\n+.currency-display {\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 8px;\r\n+  padding: 8px 12px;\r\n+  border: 1px solid #e0e0e0;\r\n+  border-radius: 6px;\r\n+  background: white;\r\n+  font-size: 14px;\r\n+  transition: border-color 0.2s;\r\n+}\r\n+\r\n+.currency-display:hover {\r\n+  border-color: #fc6421;\r\n+}\r\n+\r\n+.currency-symbol {\r\n+  font-weight: bold;\r\n+  font-size: 16px;\r\n+}\r\n+\r\n+.currency-code {\r\n+  color: #666;\r\n+  font-size: 12px;\r\n+}\r\n+\r\n+.currency-display i {\r\n+  font-size: 12px;\r\n+  transition: transform 0.2s;\r\n+  color: #666;\r\n+}\r\n+\r\n+.currency-display i.rotated {\r\n+  transform: rotate(180deg);\r\n+}\r\n+\r\n+.currency-options {\r\n+  position: absolute;\r\n+  top: 100%;\r\n+  left: 0;\r\n+  right: 0;\r\n+  background: white;\r\n+  border: 1px solid #e0e0e0;\r\n+  border-radius: 6px;\r\n+  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n+  z-index: 1000;\r\n+  max-height: 200px;\r\n+  overflow-y: auto;\r\n+  margin-top: 4px;\r\n+}\r\n+\r\n+.currency-option {\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 8px;\r\n+  padding: 10px 12px;\r\n+  cursor: pointer;\r\n+  transition: background-color 0.2s;\r\n+  border-bottom: 1px solid #f0f0f0;\r\n+}\r\n+\r\n+.currency-option:last-child {\r\n+  border-bottom: none;\r\n+}\r\n+\r\n+.currency-option:hover {\r\n+  background-color: #f8f9fa;\r\n+}\r\n+\r\n+.currency-option.active {\r\n+  background-color: #fc6421;\r\n+  color: white;\r\n+}\r\n+\r\n+.currency-option.active .currency-code {\r\n+  color: rgba(255, 255, 255, 0.8);\r\n+}\r\n+\r\n+.currency-name {\r\n+  flex: 1;\r\n+  font-size: 14px;\r\n+}\r\n+\r\n+/* Mobile responsive */\r\n+@media (max-width: 768px) {\r\n+  .currency-display {\r\n+    padding: 6px 8px;\r\n+    font-size: 13px;\r\n+  }\r\n+  \r\n+  .currency-options {\r\n+    max-height: 150px;\r\n+  }\r\n+  \r\n+  .currency-option {\r\n+    padding: 8px 10px;\r\n+  }\r\n+}\r\n+</style> \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752929941689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,215 +64,13 @@\n \r\n const changeCurrency = (currencyCode) => {\r\n   const currency = currencies.value.find(c => c.code === currencyCode)\r\n   if (currency) {\r\n-    currentCurrency.value = currency\r\n-    isDropdownOpen.value = false\r\n+    // Currency store'u güncelle\r\n+    currencyStore.setCurrentCurrency(currencyCode)\r\n     \r\n-    // Save to localStorage\r\n-    localStorage.setItem('selectedCurrency', currencyCode)\r\n-    \r\n-    // Emit event for parent components\r\n-    emit('currency-changed', currencyCode)\r\n-    \r\n-    // Dispatch custom event for global listeners\r\n-    window.dispatchEvent(new CustomEvent('currency-changed', {\r\n-      detail: { \r\n-        currency: currencyCode,\r\n-        currencyId: currency.id\r\n-      }\r\n-    }))\r\n-  }\r\n-}\r\n-\r\n-// Initialize from localStorage\r\n-onMounted(() => {\r\n-  const savedCurrency = localStorage.getItem('selectedCurrency')\r\n-  if (savedCurrency) {\r\n-    const currency = currencies.value.find(c => c.code === savedCurrency)\r\n-    if (currency) {\r\n-      currentCurrency.value = currency\r\n-    }\r\n-  } else {\r\n-    // Default to EUR if no currency is saved\r\n-    currentCurrency.value = currencies.value.find(c => c.code === 'EUR') || currencies.value[0]\r\n-  }\r\n-})\r\n-</script>\r\n-\r\n-<style scoped>\r\n-.currency-switcher {\r\n-  position: relative;\r\n-  display: inline-block;\r\n-}\r\n-\r\n-.currency-dropdown {\r\n-  position: relative;\r\n-  cursor: pointer;\r\n-  user-select: none;\r\n-}\r\n-\r\n-.currency-display {\r\n-  display: flex;\r\n-  align-items: center;\r\n-  gap: 8px;\r\n-  padding: 8px 12px;\r\n-  border: 1px solid #e0e0e0;\r\n-  border-radius: 6px;\r\n-  background: white;\r\n-  font-size: 14px;\r\n-  transition: border-color 0.2s;\r\n-}\r\n-\r\n-.currency-display:hover {\r\n-  border-color: #fc6421;\r\n-}\r\n-\r\n-.currency-symbol {\r\n-  font-weight: bold;\r\n-  font-size: 16px;\r\n-}\r\n-\r\n-.currency-code {\r\n-  color: #666;\r\n-  font-size: 12px;\r\n-}\r\n-\r\n-.currency-display i {\r\n-  font-size: 12px;\r\n-  transition: transform 0.2s;\r\n-  color: #666;\r\n-}\r\n-\r\n-.currency-display i.rotated {\r\n-  transform: rotate(180deg);\r\n-}\r\n-\r\n-.currency-options {\r\n-  position: absolute;\r\n-  top: 100%;\r\n-  left: 0;\r\n-  right: 0;\r\n-  background: white;\r\n-  border: 1px solid #e0e0e0;\r\n-  border-radius: 6px;\r\n-  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n-  z-index: 1000;\r\n-  max-height: 200px;\r\n-  overflow-y: auto;\r\n-  margin-top: 4px;\r\n-}\r\n-\r\n-.currency-option {\r\n-  display: flex;\r\n-  align-items: center;\r\n-  gap: 8px;\r\n-  padding: 10px 12px;\r\n-  cursor: pointer;\r\n-  transition: background-color 0.2s;\r\n-  border-bottom: 1px solid #f0f0f0;\r\n-}\r\n-\r\n-.currency-option:last-child {\r\n-  border-bottom: none;\r\n-}\r\n-\r\n-.currency-option:hover {\r\n-  background-color: #f8f9fa;\r\n-}\r\n-\r\n-.currency-option.active {\r\n-  background-color: #fc6421;\r\n-  color: white;\r\n-}\r\n-\r\n-.currency-option.active .currency-code {\r\n-  color: rgba(255, 255, 255, 0.8);\r\n-}\r\n-\r\n-.currency-name {\r\n-  flex: 1;\r\n-  font-size: 14px;\r\n-}\r\n-\r\n-/* Mobile responsive */\r\n-@media (max-width: 768px) {\r\n-  .currency-display {\r\n-    padding: 6px 8px;\r\n-    font-size: 13px;\r\n-  }\r\n-  \r\n-  .currency-options {\r\n-    max-height: 150px;\r\n-  }\r\n-  \r\n-  .currency-option {\r\n-    padding: 8px 10px;\r\n-  }\r\n-}\r\n-</style> \n-<template>\r\n-  <div class=\"currency-switcher\">\r\n-    <div class=\"currency-dropdown\" @click=\"toggleDropdown\" ref=\"dropdownRef\">\r\n-      <div class=\"currency-display\">\r\n-        <span class=\"currency-symbol\">{{ currentCurrency.symbol }}</span>\r\n-        <span class=\"currency-code\">{{ currentCurrency.code }}</span>\r\n-        <i class=\"fas fa-chevron-down\" :class=\"{ 'rotated': isDropdownOpen }\"></i>\r\n-      </div>\r\n-      \r\n-      <div class=\"currency-options\" v-if=\"isDropdownOpen\">\r\n-        <div \r\n-          v-for=\"currency in currencies\" \r\n-          :key=\"currency.code\"\r\n-          class=\"currency-option\"\r\n-          @click=\"changeCurrency(currency.code)\"\r\n-          :class=\"{ 'active': currency.code === currentCurrency.code }\"\r\n-        >\r\n-          <span class=\"currency-symbol\">{{ currency.symbol }}</span>\r\n-          <span class=\"currency-name\">{{ currency.name }}</span>\r\n-          <span class=\"currency-code\">{{ currency.code }}</span>\r\n-        </div>\r\n-      </div>\r\n-    </div>\r\n-  </div>\r\n-</template>\r\n-\r\n-<script setup>\r\n-import { ref, onMounted, onUnmounted } from 'vue'\r\n-import { onClickOutside } from '@vueuse/core'\r\n-\r\n-const emit = defineEmits(['currency-changed'])\r\n-\r\n-const dropdownRef = ref(null)\r\n-const isDropdownOpen = ref(false)\r\n-\r\n-const currencies = ref([\r\n-  { code: 'EUR', name: 'Euro', symbol: '€', id: 4 },\r\n-  { code: 'USD', name: 'US Dollar', symbol: '$', id: 5 },\r\n-  { code: 'GBP', name: 'British Pound', symbol: '£', id: 6 },\r\n-  { code: 'TRY', name: 'Turkish Lira', symbol: '₺', id: 7 }\r\n-])\r\n-\r\n-const currentCurrency = ref(currencies.value[0]) // Default to EUR\r\n-\r\n-// Close dropdown when clicking outside\r\n-onClickOutside(dropdownRef, () => {\r\n-  isDropdownOpen.value = false\r\n-})\r\n-\r\n-const toggleDropdown = () => {\r\n-  isDropdownOpen.value = !isDropdownOpen.value\r\n-}\r\n-\r\n-const changeCurrency = (currencyCode) => {\r\n-  const currency = currencies.value.find(c => c.code === currencyCode)\r\n-  if (currency) {\r\n-    currentCurrency.value = currency\r\n     isDropdownOpen.value = false\r\n     \r\n-    // Save to localStorage\r\n-    localStorage.setItem('selectedCurrency', currencyCode)\r\n-    \r\n     // Emit event for parent components\r\n     emit('currency-changed', currencyCode)\r\n     \r\n     // Dispatch custom event for global listeners\r\n"
                },
                {
                    "date": 1752929947117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,20 +82,12 @@\n     }))\r\n   }\r\n }\r\n \r\n-// Initialize from localStorage\r\n+// Initialize from currency store\r\n onMounted(() => {\r\n-  const savedCurrency = localStorage.getItem('selectedCurrency')\r\n-  if (savedCurrency) {\r\n-    const currency = currencies.value.find(c => c.code === savedCurrency)\r\n-    if (currency) {\r\n-      currentCurrency.value = currency\r\n-    }\r\n-  } else {\r\n-    // Default to EUR if no currency is saved\r\n-    currentCurrency.value = currencies.value.find(c => c.code === 'EUR') || currencies.value[0]\r\n-  }\r\n+  // Currency store'dan currencies'ı yükle\r\n+  currencyStore.fetchCurrencies()\r\n })\r\n </script>\r\n \r\n <style scoped>\r\n"
                },
                {
                    "date": 1752930194595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,36 +24,25 @@\n   </div>\r\n </template>\r\n \r\n <script setup>\r\n-import { ref, onMounted, onUnmounted, computed } from 'vue'\r\n+import { ref, onMounted, onUnmounted } from 'vue'\r\n import { onClickOutside } from '@vueuse/core'\r\n-import { useCurrencyStore } from '../stores/currency'\r\n \r\n const emit = defineEmits(['currency-changed'])\r\n \r\n const dropdownRef = ref(null)\r\n const isDropdownOpen = ref(false)\r\n \r\n-// Currency store'u kullan\r\n-const currencyStore = useCurrencyStore()\r\n+const currencies = ref([\r\n+  { code: 'EUR', name: 'Euro', symbol: '€', id: 4 },\r\n+  { code: 'USD', name: 'US Dollar', symbol: '$', id: 5 },\r\n+  { code: 'GBP', name: 'British Pound', symbol: '£', id: 6 },\r\n+  { code: 'TRY', name: 'Turkish Lira', symbol: '₺', id: 7 }\r\n+])\r\n \r\n-// Currency store'dan currencies'ı al\r\n-const currencies = computed(() => {\r\n-  return currencyStore.currencies.map(currency => ({\r\n-    code: currency.currency,\r\n-    name: currency.name,\r\n-    symbol: currency.icon,\r\n-    id: currency.id\r\n-  }))\r\n-})\r\n+const currentCurrency = ref(currencies.value[0]) // Default to EUR\r\n \r\n-// Current currency'yi currency store'dan al\r\n-const currentCurrency = computed(() => {\r\n-  const currentCode = currencyStore.getCurrentCurrency()\r\n-  return currencies.value.find(c => c.code === currentCode) || currencies.value[0]\r\n-})\r\n-\r\n // Close dropdown when clicking outside\r\n onClickOutside(dropdownRef, () => {\r\n   isDropdownOpen.value = false\r\n })\r\n@@ -64,13 +53,14 @@\n \r\n const changeCurrency = (currencyCode) => {\r\n   const currency = currencies.value.find(c => c.code === currencyCode)\r\n   if (currency) {\r\n-    // Currency store'u güncelle\r\n-    currencyStore.setCurrentCurrency(currencyCode)\r\n-    \r\n+    currentCurrency.value = currency\r\n     isDropdownOpen.value = false\r\n     \r\n+    // Save to localStorage\r\n+    localStorage.setItem('selectedCurrency', currencyCode)\r\n+    \r\n     // Emit event for parent components\r\n     emit('currency-changed', currencyCode)\r\n     \r\n     // Dispatch custom event for global listeners\r\n@@ -82,12 +72,20 @@\n     }))\r\n   }\r\n }\r\n \r\n-// Initialize from currency store\r\n+// Initialize from localStorage\r\n onMounted(() => {\r\n-  // Currency store'dan currencies'ı yükle\r\n-  currencyStore.fetchCurrencies()\r\n+  const savedCurrency = localStorage.getItem('selectedCurrency')\r\n+  if (savedCurrency) {\r\n+    const currency = currencies.value.find(c => c.code === savedCurrency)\r\n+    if (currency) {\r\n+      currentCurrency.value = currency\r\n+    }\r\n+  } else {\r\n+    // Default to EUR if no currency is saved\r\n+    currentCurrency.value = currencies.value.find(c => c.code === 'EUR') || currencies.value[0]\r\n+  }\r\n })\r\n </script>\r\n \r\n <style scoped>\r\n"
                }
            ],
            "date": 1752742181967,
            "name": "Commit-0",
            "content": "<template>\r\n  <div class=\"currency-switcher\">\r\n    <div class=\"currency-dropdown\" @click=\"toggleDropdown\" ref=\"dropdownRef\">\r\n      <div class=\"currency-display\">\r\n        <span class=\"currency-symbol\">{{ currentCurrency.symbol }}</span>\r\n        <span class=\"currency-code\">{{ currentCurrency.code }}</span>\r\n        <i class=\"fas fa-chevron-down\" :class=\"{ 'rotated': isDropdownOpen }\"></i>\r\n      </div>\r\n      \r\n      <div class=\"currency-options\" v-if=\"isDropdownOpen\">\r\n        <div \r\n          v-for=\"currency in currencies\" \r\n          :key=\"currency.code\"\r\n          class=\"currency-option\"\r\n          @click=\"changeCurrency(currency.code)\"\r\n          :class=\"{ 'active': currency.code === currentCurrency.code }\"\r\n        >\r\n          <span class=\"currency-symbol\">{{ currency.symbol }}</span>\r\n          <span class=\"currency-name\">{{ currency.name }}</span>\r\n          <span class=\"currency-code\">{{ currency.code }}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onUnmounted } from 'vue'\r\nimport { onClickOutside } from '@vueuse/core'\r\n\r\nconst emit = defineEmits(['currency-changed'])\r\n\r\nconst dropdownRef = ref(null)\r\nconst isDropdownOpen = ref(false)\r\n\r\nconst currencies = ref([\r\n  { code: 'TRY', name: 'Turkish Lira', symbol: '₺', id: 5 },\r\n  { code: 'EUR', name: 'Euro', symbol: '€', id: 1 },\r\n  { code: 'USD', name: 'US Dollar', symbol: '$', id: 2 },\r\n  { code: 'GBP', name: 'British Pound', symbol: '£', id: 3 },\r\n  { code: 'RUB', name: 'Russian Ruble', symbol: '₽', id: 4 }\r\n])\r\n\r\nconst currentCurrency = ref(currencies.value[0]) // Default to TRY\r\n\r\n// Close dropdown when clicking outside\r\nonClickOutside(dropdownRef, () => {\r\n  isDropdownOpen.value = false\r\n})\r\n\r\nconst toggleDropdown = () => {\r\n  isDropdownOpen.value = !isDropdownOpen.value\r\n}\r\n\r\nconst changeCurrency = (currencyCode) => {\r\n  const currency = currencies.value.find(c => c.code === currencyCode)\r\n  if (currency) {\r\n    currentCurrency.value = currency\r\n    isDropdownOpen.value = false\r\n    \r\n    // Save to localStorage\r\n    localStorage.setItem('selectedCurrency', currencyCode)\r\n    \r\n    // Emit event for parent components\r\n    emit('currency-changed', currencyCode)\r\n    \r\n    // Dispatch custom event for global listeners\r\n    window.dispatchEvent(new CustomEvent('currency-changed', {\r\n      detail: { \r\n        currency: currencyCode,\r\n        currencyId: currency.id\r\n      }\r\n    }))\r\n  }\r\n}\r\n\r\n// Initialize from localStorage\r\nonMounted(() => {\r\n  const savedCurrency = localStorage.getItem('selectedCurrency')\r\n  if (savedCurrency) {\r\n    const currency = currencies.value.find(c => c.code === savedCurrency)\r\n    if (currency) {\r\n      currentCurrency.value = currency\r\n    }\r\n  }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.currency-switcher {\r\n  position: relative;\r\n  display: inline-block;\r\n}\r\n\r\n.currency-dropdown {\r\n  position: relative;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n.currency-display {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  padding: 8px 12px;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 6px;\r\n  background: white;\r\n  font-size: 14px;\r\n  transition: border-color 0.2s;\r\n}\r\n\r\n.currency-display:hover {\r\n  border-color: #fc6421;\r\n}\r\n\r\n.currency-symbol {\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n}\r\n\r\n.currency-code {\r\n  color: #666;\r\n  font-size: 12px;\r\n}\r\n\r\n.currency-display i {\r\n  font-size: 12px;\r\n  transition: transform 0.2s;\r\n  color: #666;\r\n}\r\n\r\n.currency-display i.rotated {\r\n  transform: rotate(180deg);\r\n}\r\n\r\n.currency-options {\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 0;\r\n  right: 0;\r\n  background: white;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 6px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n  z-index: 1000;\r\n  max-height: 200px;\r\n  overflow-y: auto;\r\n  margin-top: 4px;\r\n}\r\n\r\n.currency-option {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  padding: 10px 12px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n  border-bottom: 1px solid #f0f0f0;\r\n}\r\n\r\n.currency-option:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.currency-option:hover {\r\n  background-color: #f8f9fa;\r\n}\r\n\r\n.currency-option.active {\r\n  background-color: #fc6421;\r\n  color: white;\r\n}\r\n\r\n.currency-option.active .currency-code {\r\n  color: rgba(255, 255, 255, 0.8);\r\n}\r\n\r\n.currency-name {\r\n  flex: 1;\r\n  font-size: 14px;\r\n}\r\n\r\n/* Mobile responsive */\r\n@media (max-width: 768px) {\r\n  .currency-display {\r\n    padding: 6px 8px;\r\n    font-size: 13px;\r\n  }\r\n  \r\n  .currency-options {\r\n    max-height: 150px;\r\n  }\r\n  \r\n  .currency-option {\r\n    padding: 8px 10px;\r\n  }\r\n}\r\n</style> "
        }
    ]
}